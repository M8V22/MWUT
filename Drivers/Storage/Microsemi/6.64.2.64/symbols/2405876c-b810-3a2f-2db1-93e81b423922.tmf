// PDB:  Win10_Release\x64\\SmartPqi.pdb
// PDB:  Last Updated :2018-06-11:19:14:12:778 (UTC) [tracepdb]
2405876c-b810-3a2f-2db1-93e81b423922 2016 // SRC=Msix.c MJ= MN=
#typev msix_c1592 44 "%0
%10!s!   The driver is running in Line Based Interrupt mode.
" //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1587 43 "%0
%10!s!   The driver is running in MSI Interrupt mode.
" //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1582 42 "%0
%10!s!   The driver is running in MSI-X Interrupt mode.
" //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1557 41 "%0%10!s!   Pending bits register = 0x%11!x! " //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p32BitMsiCapReg->PendingBits, ItemLong -- 11
}
#typev msix_c1554 40 "%0%10!s!   Mask bits register = 0x%11!x! " //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p32BitMsiCapReg->MaskBits, ItemLong -- 11
}
#typev msix_c1551 39 "%0%10!s!   The controller supports MSI per-vector masking." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1546 38 "%0%10!s!   Message data = 0x%11!x! " //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p32BitMsiCapReg->MessageData, ItemLong -- 11
}
#typev msix_c1543 37 "%0%10!s!   Message address = 0x%11!x! " //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p32BitMsiCapReg->MessageAddress, ItemLong -- 11
}
#typev msix_c1518 36 "%0%10!s!   Mask bits register = 0x%11!x!." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p64BitMsiCapReg->MaskBits, ItemLong -- 11
}
#typev msix_c1510 35 "%0%10!s!   Pending bits register = 0x%11!x!." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p64BitMsiCapReg->PendingBits, ItemLong -- 11
}
#typev msix_c1507 34 "%0%10!s!   Mask bits register = 0x%11!x!." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p64BitMsiCapReg->MaskBits, ItemLong -- 11
}
#typev msix_c1504 33 "%0%10!s!   The controller supports MSI per-vector masking." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1499 32 "%0%10!s!   Message data = 0x%11!x! " //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p64BitMsiCapReg->MessageData, ItemLong -- 11
}
#typev msix_c1496 31 "%0%10!s!   Message upper address = 0x%11!x! " //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p64BitMsiCapReg->MessageUpperAddress, ItemLong -- 11
}
#typev msix_c1493 30 "%0%10!s!   Message address = 0x%11!x! " //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
p64BitMsiCapReg->MessageAddress, ItemLong -- 11
}
#typev msix_c1490 29 "%0%10!s!   The controller is capable of sending a 64-bit message address." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1451 28 "%0%10!s!   MessageId       Upper`Lower       MaskBit   MessageData      VectorControlRegister    PBARegisters" //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1384 26 "%0%10!s!   The number of vectors allocated = %11!d!." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
(1 << p32BitMsiCapReg->MessageControl.MultipleMsgEnable), ItemLong -- 11
}
#typev msix_c1381 25 "%0%10!s!   The number of requested vectors = %11!d!." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
(1 << p32BitMsiCapReg->MessageControl.MultipleMsgCap), ItemLong -- 11
}
#typev msix_c1377 24 "%0%10!s!   The controller does not support MSI per-vector masking." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1372 23 "%0%10!s!   The controller supports MSI per-vector masking." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1365 22 "%0%10!s!   MSI is Enabled." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1392 27 "%0%10!s!   MSI is Disabled." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1360 21 "%0%10!s!   Found MSI Capabilities register." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1325 19 "%0%10!s!   Use each vectors Mask bit to determine if the vector is masked or not.
" //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1320 18 "%0%10!s!   Functional Mask bit = %11!d!.  All vectors are masked." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
pMsiXcapReg->MessageControl.FunctionMask, ItemLong -- 11
}
#typev msix_c1315 17 "%0%10!s!   The MSI-x Table size is %11!d!." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
(pMsiXcapReg->MessageControl.TableSize + 1), ItemLong -- 11
}
#typev msix_c1310 16 "%0%10!s!   MSI-x is enabled." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1334 20 "%0%10!s!   MSI-x is disabled." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1305 15 "%0%10!s!   Found MSI-x capabilities register." //   LEVEL=2 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1283 14 "%0%10!s! !!!Could not get PCI information.!!!" //   LEVEL=0 FLAGS=DbgFlagInit FUNC=MiCheckInterruptMode
{
IDSTR, ItemString -- 10
}
#typev msix_c1206 13 "%0
%10!s!   The number of messages(AKA vectors) actually allocated to controller = %11!d!.
" //   LEVEL=1 FLAGS=DbgFlagInit FUNC=MiGetMessageInfo
{
IDSTR, ItemString -- 10
pDeviceExtension->HbaConfiguration.usAllocatedMessageCnt, ItemLong -- 11
}
#typev msix_c1156 12 "%0
%10!s!   The number of messages(AKA vectors) actually allocated to controller = %11!d!.
" //   LEVEL=1 FLAGS=DbgFlagInit FUNC=MiGetMessageInfo
{
IDSTR, ItemString -- 10
pDeviceExtension->HbaConfiguration.usAllocatedMessageCnt, ItemLong -- 11
}
#typev msix_c1827 48 "%0%10!s!  !Waited %11!d! second(s) for Internal Driver initiated request to complete. Request did not complete!" //   LEVEL=0 FLAGS=DbgFlagInit FUNC=PollEventQForCompletion
{
IDSTR, ItemString -- 10
ulTimeout, ItemLong -- 11
}
#typev msix_c1676 45 "%0%10!s!  !Waited %11!d! second(s) for Internal Driver initiated request to complete. Request did not complete!" //   LEVEL=0 FLAGS=DbgFlagInit FUNC=PollForCompletion
{
IDSTR, ItemString -- 10
ulTimeout, ItemLong -- 11
}
#typev msix_c1750 47 "%0%10!s!   !ReportLunEx did not complete. !Waited %11!d! second(s) for ReportLunsEx request to complete!" //   LEVEL=0 FLAGS=DbgFlagInit FUNC=PollForReportLunsCompletion
{
IDSTR, ItemString -- 10
ulTimeout, ItemLong -- 11
}
#typev msix_c1743 46 "%0%10!s!   ReportLunEx completed in %11!d! second(s)." //   LEVEL=1 FLAGS=DbgFlagInit FUNC=PollForReportLunsCompletion
{
IDSTR, ItemString -- 10
((ulLoopCnt/20000)+1), ItemLong -- 11
}
