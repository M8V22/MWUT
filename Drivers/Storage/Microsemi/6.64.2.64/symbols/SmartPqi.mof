#pragma autorecover
#pragma classflags("forceupdate")
#pragma namespace("\\\\.\\root\\WMI")
//
// WPP Generated File
// PDB:  Win10_Release\x64\\SmartPqi.pdb
// PDB:  Last Updated :2018-06-11:19:14:12:778 (UTC) [tracepdb]
//

//ModuleName = SmartPqiSmartPqiTraceGuid	 (Init called in Function DriverEntry)
[Dynamic,
 Description("SmartPqi_SmartPqiTraceGuid"),
 guid("{9DD3B5A6-035B-43B8-84E1-B8B6B5207BD6}"),
 locale("MS\\0x409")]
class SmartPqiSmartPqiTraceGuid : EventTrace
{
    [Description ("Enable Flags") : amended,
        ValueDescriptions{
             "DbgFlagInit Flag",
             "DbgFlagPnp Flag",
             "DbgFlagPower Flag",
             "DbgFlagEnum Flag",
             "DbgFlagIo Flag",
             "DbgFlagIoctl Flag",
             "DbgFlagIsr Flag",
             "DbgFlagScatterGather Flag",
             "DbgFlagWmi Flag",
             "DbgFlagHeartBeat Flag",
             "DbgFlagDpc Flag",
             "DbgFlagMsi Flag",
             "DbgFlagTimer Flag",
             "DbgFlagRegistry Flag",
             "DbgFlagResets Flag",
             "DbgFlagFlow Flag",
             "DbgFlagLocks Flag",
             "DbgFlagGeneral Flag",
             "DbgFlagShutdown Flag",
             "DbgFlagFlagTest Flag",
             "DbgFlagRescan Flag",
             "DbgFlagD21 Flag",
             "DbgFlagD22 Flag",
             "DbgFlagD23 Flag",
             "DbgFlagD24 Flag",
             "DbgFlagD25 Flag",
             "DbgFlagD26 Flag",
             "DbgFlagD27 Flag",
             "DbgFlagD28 Flag",
             "DbgFlagD29 Flag",
             "DbgFlagD30 Flag",
             "DbgFlagD31 Flag"},
        DefineValues{
             "DbgFlagInit",
             "DbgFlagPnp",
             "DbgFlagPower",
             "DbgFlagEnum",
             "DbgFlagIo",
             "DbgFlagIoctl",
             "DbgFlagIsr",
             "DbgFlagScatterGather",
             "DbgFlagWmi",
             "DbgFlagHeartBeat",
             "DbgFlagDpc",
             "DbgFlagMsi",
             "DbgFlagTimer",
             "DbgFlagRegistry",
             "DbgFlagResets",
             "DbgFlagFlow",
             "DbgFlagLocks",
             "DbgFlagGeneral",
             "DbgFlagShutdown",
             "DbgFlagFlagTest",
             "DbgFlagRescan",
             "DbgFlagD21",
             "DbgFlagD22",
             "DbgFlagD23",
             "DbgFlagD24",
             "DbgFlagD25",
             "DbgFlagD26",
             "DbgFlagD27",
             "DbgFlagD28",
             "DbgFlagD29",
             "DbgFlagD30",
             "DbgFlagD31"},
        Values{
             "DbgFlagInit",
             "DbgFlagPnp",
             "DbgFlagPower",
             "DbgFlagEnum",
             "DbgFlagIo",
             "DbgFlagIoctl",
             "DbgFlagIsr",
             "DbgFlagScatterGather",
             "DbgFlagWmi",
             "DbgFlagHeartBeat",
             "DbgFlagDpc",
             "DbgFlagMsi",
             "DbgFlagTimer",
             "DbgFlagRegistry",
             "DbgFlagResets",
             "DbgFlagFlow",
             "DbgFlagLocks",
             "DbgFlagGeneral",
             "DbgFlagShutdown",
             "DbgFlagFlagTest",
             "DbgFlagRescan",
             "DbgFlagD21",
             "DbgFlagD22",
             "DbgFlagD23",
             "DbgFlagD24",
             "DbgFlagD25",
             "DbgFlagD26",
             "DbgFlagD27",
             "DbgFlagD28",
             "DbgFlagD29",
             "DbgFlagD30",
             "DbgFlagD31"},
        ValueMap{
             "0x00000001",
             "0x00000002",
             "0x00000004",
             "0x00000008",
             "0x00000010",
             "0x00000020",
             "0x00000040",
             "0x00000080",
             "0x00000100",
             "0x00000200",
             "0x00000400",
             "0x00000800",
             "0x00001000",
             "0x00002000",
             "0x00004000",
             "0x00008000",
             "0x00010000",
             "0x00020000",
             "0x00040000",
             "0x00080000",
             "0x00100000",
             "0x00200000",
             "0x00400000",
             "0x00800000",
             "0x01000000",
             "0x02000000",
             "0x04000000",
             "0x08000000",
             "0x10000000",
             "0x20000000",
             "0x40000000",
             "0x80000000"}: amended
    ]
    uint32 Flags;
    [Description ("Levels") : amended,
        ValueDescriptions{
            "Abnormal exit or termination",
            "Severe errors that need logging",
            "Warnings such as allocation failure",
            "Includes non-error cases",
            "Detailed traces from intermediate steps" } : amended,
         DefineValues{
            "TRACE_LEVEL_FATAL",
            "TRACE_LEVEL_ERROR",
            "TRACE_LEVEL_WARNING"
            "TRACE_LEVEL_INFORMATION",
            "TRACE_LEVEL_VERBOSE" },
        Values{
            "Fatal",
            "Error",
            "Warning",
            "Information",
            "Verbose" },
        ValueMap{
            "0x1",
            "0x2",
            "0x3",
            "0x4",
            "0x5" },
        ValueType("index")
    ]
    uint32 Level;
};
